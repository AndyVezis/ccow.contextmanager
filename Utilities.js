// Generated by CoffeeScript 1.6.3
var CX, Format, clone, formatter, reply, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

clone = function(obj) {
  var flags, key, newInstance;
  if ((obj == null) || typeof obj !== 'object') {
    return obj;
  }
  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }
  if (obj instanceof RegExp) {
    flags = '';
    if (obj.global != null) {
      flags += 'g';
    }
    if (obj.ignoreCase != null) {
      flags += 'i';
    }
    if (obj.multiline != null) {
      flags += 'm';
    }
    if (obj.sticky != null) {
      flags += 'y';
    }
    return new RegExp(obj.source, flags);
  }
  newInstance = new obj.constructor();
  for (key in obj) {
    newInstance[key] = clone(obj[key]);
  }
  return newInstance;
};

Format = (function() {
  function Format() {}

  Format.prototype.parseHAP = function(hap) {
    return hap.split("^");
  };

  Format.prototype.generateHAP = function(hap) {
    return hap.join("^");
  };

  Format.prototype.parseList = function(list) {
    return list.split("|");
  };

  Format.prototype.generateList = function(list) {
    return list.join("|");
  };

  Format.prototype.parseObject = function(obj) {
    var kvs,
      _this = this;
    if (obj.indexOf("^") + obj.indexOf("|") + obj.indexOf("&") < 0) {
      return obj;
    }
    if (obj.indexOf("&") > 0) {
      kvs = obj.split("&") || [];
      return _.reduce(kvs, (function(memo, kv) {
        var key, value, _ref;
        _ref = kv.split("="), key = _ref[0], value = _ref[1];
        memo[key] = _this.parseObject(value);
        return memo;
      }), {});
    } else if (obj.indexOf("|") > 0) {
      return this.parseList(obj);
    } else {
      return this.parseHAP(obj);
    }
  };

  Format.prototype.generateObject = function(obj) {
    var _this = this;
    if (typeof obj !== "object") {
      return obj != null ? obj.toString() : void 0;
    }
    if (obj instanceof Array) {
      return this.generateList(obj);
    } else {
      return _.reduce(obj, (function(memo, value, key) {
        memo.push("" + key + "=" + (_this.generateObject(value)));
        return memo;
      }), []).join("&");
    }
  };

  Format.prototype.serialize = function() {};

  return Format;

})();

CX = (function(_super) {
  __extends(CX, _super);

  function CX(hap) {
    var _ref;
    _ref = this.parseHAP(hap), this.id = _ref[0], this.checkdigit = _ref[1], this.checkdigitscheme = _ref[2], this.assigningauthority = _ref[3], this.identifiertypecode = _ref[4], this.assigningfacility = _ref[5], this.effectivedate = _ref[6], this.expirationdate = _ref[7];
  }

  CX.prototype.serialize = function() {
    return this.generateHAP([this.id, this.checkdigit, this.checkdigitscheme, this.assigningauthority, this.identifiertypecode, this.assigningfacility, this.effectivedate, this.expirationdate]);
  };

  return CX;

})(Format);

reply = function(formatter) {
  return function(req, res, data) {
    if ((data != null ? data.status : void 0) != null) {
      res.status(data.status);
    }
    if (req.accepts("json") != null) {
      return res.json(data);
    } else {
      return res.send(formatter.generateObject(data));
    }
  };
};

formatter = new Format();

module.exports = {
  formatter: formatter,
  reply: reply(formatter),
  clone: clone
};
