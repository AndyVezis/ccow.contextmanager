// Generated by CoffeeScript 1.6.1
(function() {
  var ContextParticipant, ContextParticipantProxy, Q, formatter, url, winston,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require('url');

  Q = require('q');

  formatter = require('./Utilities.js').formatter;

  winston = require('winston');

  ContextParticipant = (function() {

    function ContextParticipant(coupon, applicationName) {
      this.coupon = coupon;
      this.applicationName = applicationName;
    }

    ContextParticipant.prototype.ContextChangesPending = function(contextCoupon) {
      this.log("ContextChangesPending (accept'ed)");
      return {
        decision: "accept",
        reason: ""
      };
    };

    ContextParticipant.prototype.ContextChangesAccepted = function(contextCoupon) {
      return this.log("ContextChangesAccepted(" + contextCoupon + ")");
    };

    ContextParticipant.prototype.ContextChangesCancelled = function(contextCoupon) {
      return this.log("ContextChangesCancelled(" + contextCoupon + ")");
    };

    ContextParticipant.prototype.CommonContextTerminated = function() {
      return this.log("CommonContextTerminated");
    };

    ContextParticipant.prototype.Ping = function() {
      this.log("Ping. Pong.");
      return "Pong";
    };

    ContextParticipant.prototype.log = function(msg) {};

    return ContextParticipant;

  })();

  ContextParticipantProxy = (function(_super) {

    __extends(ContextParticipantProxy, _super);

    function ContextParticipantProxy(coupon, applicationName, url, http) {
      this.coupon = coupon;
      this.applicationName = applicationName;
      this.url = url;
      this.http = http != null ? http : require("http");
    }

    ContextParticipantProxy.prototype.ContextChangesAccepted = function(contextCoupon) {
      return this.get("ContextChangesAccepted", contextCoupon);
    };

    ContextParticipantProxy.prototype.ContextChangesCancelled = function(contextCoupon) {
      return this.get("ContextChangesCancelled", contextCoupon);
    };

    ContextParticipantProxy.prototype.CommonContextTerminated = function(contextCoupon) {
      return this.get("CommonContextTerminated", contextCoupon);
    };

    ContextParticipantProxy.prototype.ContextChangesPending = function(contextCoupon) {
      return this.get("ContextChangesPending", contextCoupon);
    };

    ContextParticipantProxy.prototype.get = function(method, contextCoupon) {
      var deferred,
        _this = this;
      this.log("ContextChangesPending(" + contextCoupon + ") -- proxying to " + this.url);
      deferred = Q.defer();
      this.http.get("" + this.url + "/ContextParticipant/" + method + "?contextCoupon=" + contextCoupon, function(res) {
        var chunks;
        chunks = "";
        res.on("data", function(chunk) {
          return chunks += chunk;
        });
        return res.on("end", function() {
          var response;
          response = formatter.parseObject(chunks);
          _this.log("received response '" + chunks + "' parsed into '" + response + "'");
          return deferred.resolve(response);
        });
      }).on("error", function(e) {
        _this.log("received error " + e);
        return deferred.resolve({
          decision: "error",
          reason: "Could not contact '" + _this.applicationName + "' at '" + _this.url + "'."
        });
      });
      return deferred.promise;
    };

    return ContextParticipantProxy;

  })(ContextParticipant);

  exports.ContextParticipant = ContextParticipant;

  exports.ContextParticipantProxy = ContextParticipantProxy;

}).call(this);
