// Generated by CoffeeScript 1.6.1
(function() {
  var ContextManager, ContextParticipant, ContextParticipantProxy, Q, clone, events, logger,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  clone = require("./Utilities.js").clone;

  events = require('events');

  Q = require('q');

  logger = require('winston');

  ContextParticipant = require("./ContextParticipant.js").ContextParticipant;

  ContextParticipantProxy = require("./ContextParticipant.js").ContextParticipantProxy;

  ContextManager = (function(_super) {

    __extends(ContextManager, _super);

    function ContextManager(context, notifier) {
      this.context = context;
      this.notifier = notifier;
      this.uuid = require('node-uuid');
      this._ = require('underscore');
    }

    ContextManager.prototype.InvokeAndMapArguments = function(method, args) {
      switch (method) {
        case "JoinCommonContext":
          return this.JoinCommonContext(args.applicationName, args.contextParticipant);
        case "LeaveCommonContext":
          return this.LeaveCommonContext(args.participantCoupon);
        case "StartContextChanges":
          return this.StartContextChanges(args.participantCoupon);
        case "EndContextChanges":
          return this.EndContextChanges(args.contextCoupon);
        case "PublishChangesDecision":
          return this.PublishChangesDecision(args.contextCoupon, args.decision);
        case "GetMostRecentContextCoupon":
          return this.GetMostRecentContextCoupon();
        default:
          throw {
            msg: "No such method '" + method + "' on ContextManager"
          };
      }
    };

    /*
    */


    ContextManager.prototype.JoinCommonContext = function(applicationName, contextParticipant) {
      var participant, participantInContext;
      if (applicationName == null) {
        throw {
          type: "MissingArg",
          msg: "'applicationName' is mandatory for JoinCommonContext"
        };
      }
      participant = contextParticipant != null ? new ContextParticipantProxy(this.uuid.v4(), applicationName, contextParticipant) : new ContextParticipant(this.uuid.v4(), applicationName);
      participantInContext = this._.find(this.context.participants, function(p) {
        return p.applicationName === participant.applicationName && p.url === participant.url;
      });
      if (participantInContext == null) {
        this.context.participants.push(participant);
      } else {
        participant = participantInContext;
      }
      return participant.coupon;
    };

    ContextManager.prototype.LeaveCommonContext = function(participantCoupon) {
      if (participantCoupon == null) {
        throw {
          type: "MissingArg",
          msg: "'participantCoupon' is mandatory for LeaveCommonContext"
        };
      }
      this.context.participants = this._.reject(this.context.participants, function(p) {
        return p.coupon === participantCoupon;
      });
      return logger.info("" + participantCoupon + " left context, current participants are now: " + (this._.pluck(this.context.participants, "coupon")));
    };

    ContextManager.prototype.StartContextChanges = function(participantCoupon) {
      var context, contextCoupon;
      contextCoupon = this.uuid.v4();
      context = {
        items: clone(this.context.items),
        active: true,
        coupon: contextCoupon,
        owner: participantCoupon
      };
      this.context.sessions[contextCoupon] = context;
      return contextCoupon;
    };

    ContextManager.prototype.EndContextChanges = function(contextCoupon) {
      var defer, participant, responses;
      if (this.context.sessions[contextCoupon] == null) {
        throw new {
          status: 501,
          msg: "No such context " + contextCoupon
        };
      }
      this.context.sessions[contextCoupon].active = false;
      logger.debug(this.notifier);
      if (typeof this.notifier === "function") {
        this.notifier({
          target: {
            "interface": "ContextParticipant",
            method: "ContextChangesPending"
          },
          args: {
            contextCoupon: contextCoupon
          }
        });
      }
      responses = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.context.participants;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          participant = _ref[_i];
          if (participant.coupon !== ((_ref1 = this.context.sessions[contextCoupon]) != null ? _ref1.owner : void 0)) {
            _results.push(participant.ContextChangesPending(contextCoupon));
          }
        }
        return _results;
      }).call(this);
      defer = Q.defer();
      if (responses.length > 0) {
        Q.allResolved(responses).then(function(promises) {
          var promise, result;
          result = {
            noContinue: false,
            responses: (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = promises.length; _i < _len; _i++) {
                promise = promises[_i];
                _results.push(promise.valueOf != null ? promise.valueOf() : promise);
              }
              return _results;
            })()
          };
          return defer.resolve(result);
        });
      } else {
        defer.resolve({
          noContinue: false,
          responses: []
        });
      }
      return defer.promise;
    };

    ContextManager.prototype.PublishChangesDecision = function(contextCoupon, decision) {
      var accepted, context, participant, _i, _len, _ref;
      context = this.context.sessions[contextCoupon];
      delete this.context.sessions[contextCoupon];
      accepted = (decision != null ? decision.toLowerCase() : void 0) === "accept";
      this.context.latestContextCoupon = contextCoupon;
      this.context.items = context.items;
      if (typeof this.notifier === "function") {
        this.notifier({
          target: {
            "interface": "ContextParticipant",
            method: accepted ? "ContextChangesAccepted" : "ContextChangesCancelled"
          },
          args: {
            contextCoupon: contextCoupon || ""
          }
        });
      }
      _ref = this.context.participants;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        participant = _ref[_i];
        if (participant.coupon !== (context != null ? context.owner : void 0)) {
          if (accepted) {
            participant.ContextChangesAccepted(contextCoupon || "");
          } else {
            participant.ContextChangesCancelled(contextCoupon || "");
          }
        }
      }
    };

    ContextManager.prototype.GetMostRecentContextCoupon = function() {
      return this.context.latestContextCoupon;
    };

    return ContextManager;

  })(events.EventEmitter);

  exports.ContextManager = ContextManager;

}).call(this);
