// Generated by CoffeeScript 1.6.1
(function() {
  var ContextData, ContextManager, Q, Util, app, defaultcontext, defaultcontextmanager, interfaces, io, logger, server, _;

  app = require('express')();

  server = require('http').createServer(app);

  io = require('socket.io').listen(server);

  _ = require('underscore');

  Q = require('q');

  Util = require('./Utilities.js');

  logger = require('winston');

  ContextData = require('./ContextData.js').ContextData;

  ContextManager = require('./ContextManager.js').ContextManager;

  defaultcontext = new ContextData("default");

  defaultcontext.on("updated", function() {
    return logger.debug("UPDATED!");
  });

  defaultcontextmanager = new ContextManager(defaultcontext, function(msg) {
    return io.sockets.emit("message", msg);
  });

  interfaces = {
    contextdata: defaultcontext,
    contextmanager: defaultcontextmanager
  };

  app.get('/:interface/:method', function(req, res) {
    var ifc;
    ifc = interfaces[req.param('interface').toLowerCase()];
    logger.info("Invoking '" + (req.param('method')) + "' on '" + (req.param('interface')) + "'");
    return Q.all(ifc.InvokeAndMapArguments(req.param('method'), req.query)).then(function(result) {
      return Util.reply(req, res, result);
    }).fail(function(err) {
      logger.error((err != null ? err.msg : void 0) || err);
      return Util.reply(req, res, err);
    });
  });

  app.get('/:interface', function(req, res) {
    var ifc;
    ifc = interfaces[req.param('interface').toLowerCase()];
    if (ifc == null) {
      logger.log("No such interface " + (req.param('interface')) + ".");
      res.status(500).send("No such interface " + (req.param('interface')) + ".");
      return;
    }
    if (req.query.method == null) {
      logger.log("Missing 'method' query param");
      res.status(500).send("Missing 'method' query param");
      return;
    }
    logger.info("Invoking '" + req.query.method + " on " + (req.param('interface')) + "'");
    return Q.all(ifc.InvokeAndMapArguments(req.query.method, req.query)).then(function(result) {
      return Util.reply(req, res, result);
    }).fail(function(err) {
      logger.error((err != null ? err.msg : void 0) || err);
      return Util.reply(req, res, err);
    });
  });

  app.get('/', function(req, res) {
    var ifc;
    if (!((req.query.method != null) || (req.query["interface"] != null))) {
      logger.warn("Missing 'method' or 'interface' query param");
      res.status(500).send("Missing 'method' or 'interface' query param");
      return;
    }
    logger.info("Invoking '" + req.query.method + " on " + req.query["interface"] + "'");
    ifc = interfaces[req.query["interface"].toLowerCase()];
    return Q.all(ifc.InvokeAndMapArguments(req.query.method, req.query)).then(function(result) {
      return Util.reply(req, res, result);
    }).fail(function(err) {
      logger.error((err != null ? err.msg : void 0) || err);
      return Util.reply(req, res, err);
    });
  });

  server.listen(3000);

  console.log('Listening on port 3000');

}).call(this);
