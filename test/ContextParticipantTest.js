// Generated by CoffeeScript 1.6.1
(function() {
  var ContextParticipant, ContextParticipantProxy, TestHttp, TestResource, clone, cp, events, should,
    _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  should = require('should');

  clone = require("../Utilities.js").clone;

  events = require("events");

  ContextParticipant = require('../ContextParticipant.js').ContextParticipant;

  ContextParticipantProxy = require('../ContextParticipant.js').ContextParticipantProxy;

  TestResource = (function(_super) {

    __extends(TestResource, _super);

    function TestResource() {
      var _this = this;
      this.data = function(s, delay) {
        if (delay == null) {
          delay = 500;
        }
        return TestResource.prototype.data.apply(_this, arguments);
      };
      return TestResource.__super__.constructor.apply(this, arguments);
    }

    TestResource.prototype.data = function(s, delay) {
      var _this = this;
      if (delay == null) {
        delay = 500;
      }
      return setTimeout(function() {
        _this.emit("data", s);
        return _this.emit("end");
      }, delay);
    };

    return TestResource;

  })(events.EventEmitter);

  TestHttp = (function(_super) {

    __extends(TestHttp, _super);

    function TestHttp() {
      this.urlsInvoked = [];
    }

    TestHttp.prototype.get = function(url, callback) {
      var res;
      this.urlsInvoked.push(url);
      res = new TestResource();
      callback(res);
      res.data("decision=accept&reason=all good");
      return this;
    };

    return TestHttp;

  })(events.EventEmitter);

  cp = new ContextParticipant("coupon#1", "application#1");

  describe("ContextParticipant", function() {
    describe("ContextChangesPending", function() {
      return it("should return an object w properties decision and reason", function() {
        var result;
        result = cp.ContextChangesPending("coupon#3");
        result.should.have.property("decision");
        return result.should.have.property("reason");
      });
    });
    describe("ContextChangesAccepted", function() {
      return it("should't do anything interesting", function() {
        return cp.ContextChangesAccepted("coupon#3");
      });
    });
    describe("ContextChangesCancelled", function() {
      return it("should't do anything interesting", function() {
        return cp.ContextChangesCancelled("coupon#3");
      });
    });
    return describe("CommonContextTerminated", function() {
      return it("should't do anything interesting", function() {
        return cp.CommonContextTerminated();
      });
    });
  });

  describe("ContextParticipantProxy", function() {
    describe("ContextChangesPending", function() {
      return it("should GET the correct url", function(done) {
        var cpp, http, result;
        http = new TestHttp();
        cpp = new ContextParticipantProxy("coupon#2", "application#1", "http://test", http);
        result = cpp.ContextChangesPending("coupon#3");
        result.then(function(v) {
          should.exist(v);
          v.should.have.property("decision", "accept");
          return done();
        });
        http.urlsInvoked.should.have.length(1);
        return http.urlsInvoked.should.match(/ContextParticipant\/ContextChangesPending/);
      });
    });
    describe("ContextChangesAccepted", function() {
      return it("should GET the correct url", function(done) {
        var cpp, http, result;
        http = new TestHttp();
        cpp = new ContextParticipantProxy("coupon#2", "application#1", "http://test", http);
        result = cpp.ContextChangesAccepted("coupon#3");
        result.then(function(v) {
          should.exist(v);
          return done();
        });
        http.urlsInvoked.should.have.length(1);
        return http.urlsInvoked.should.match(/ContextParticipant\/ContextChangesAccepted/);
      });
    });
    describe("ContextChangesCancelled", function() {
      return it("should GET the correct url", function(done) {
        var cpp, http, result;
        http = new TestHttp();
        cpp = new ContextParticipantProxy("coupon#2", "application#1", "http://test", http);
        result = cpp.ContextChangesCancelled("coupon#3");
        result.then(function(v) {
          should.exist(v);
          return done();
        });
        http.urlsInvoked.should.have.length(1);
        return http.urlsInvoked.should.match(/ContextParticipant\/ContextChangesCancelled/);
      });
    });
    return describe("CommonContextTerminated", function() {
      return it("should GET the correct url", function(done) {
        var cpp, http, result;
        http = new TestHttp();
        cpp = new ContextParticipantProxy("coupon#2", "application#1", "http://test", http);
        result = cpp.CommonContextTerminated("coupon#3");
        result.then(function(v) {
          should.exist(v);
          return done();
        });
        http.urlsInvoked.should.have.length(1);
        return http.urlsInvoked.should.match(/ContextParticipant\/CommonContextTerminated/);
      });
    });
  });

}).call(this);
